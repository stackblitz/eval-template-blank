#!/usr/bin/env node
'use strict';

const fs = require('fs');
const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');
const promptly = require('promptly');
const { bitcoinCoreDecrypt } = require('../ts_build/src/encryption');

program
  .version(require('../package.json').version)
  .description('Imports keys/addresses from given --json or --file. If neither is given, this will simply sync the wallet\'s addresses with the server')
  .requiredOption('--name <name>', 'REQUIRED - Wallet Name')
  .option('--json <json>', 'optional - A json string to parse in the form {"address": "mXy1234", "privKey": "xxxxxxx", "pubKey": "yyyyyyyy"}')
  .option('--file <file>', 'optional - A jsonl file with {"address": "mXy1234", "privKey": "xxxxxxx", "pubKey": "yyyyyyyy"} in it')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .option('--encrypted', 'optional - Bitcoin Core specific keys in which case we need to decrypt them before import')
  .option('--rederive', 'optional - Use the pub keys to derive the addresses to match the wallet\'s addressType')
  .option('--storageType <storageType>', 'optional - Name of database (default Level)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

const getFileKeys = file => {
  let contents = fs.readFileSync(file).toString();
  let fileKeys = contents
    .split('\n')
    .filter(line => line !== '')
    .map(line => JSON.parse(line));
  return fileKeys;
};

const parseKeys = keys => {
  let parsed = JSON.parse(keys);
  if (typeof parsed === 'object') {
    if (parsed instanceof Array === false) {
      return [parsed];
    } else {
      return parsed;
    }
  }
};

let wallet;

const main = async () => {
  const { name, path, file, json, storageType, encrypted, rederive } = program.opts();
  try {
    const password = await promptly.password('Wallet Password:');
    wallet = await Wallet.loadWallet({ name, path, storageType });
    wallet = await wallet.unlock(password);
    let keyInput = [];
    if (file) {
      keyInput = getFileKeys(file);
    } else if (json) {
      keyInput = parseKeys(json);
    }
    if (encrypted) {
      try {
        const bitcoinCorePassword = await promptly.password('Enter Bitcoin Core Password:');
        let decryptedParams = bitcoinCoreDecrypt(keyInput, bitcoinCorePassword);
        keyInput = decryptedParams.jsonlDecrypted;
      } catch (e) {
        console.error(e);
      }
    }
    if (keyInput.length) {
      await wallet.importKeys({ keys: keyInput, rederiveAddys: rederive });
      console.log(`${keyInput.length} Key(s) Imported`);
    } else {
      const res = await wallet.syncAddresses(true);
      console.log(res);
    }
  } catch (e) {
    console.error(e);
  }
};

main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
